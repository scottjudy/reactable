% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reactable.R
\name{reactable-shiny}
\alias{reactable-shiny}
\alias{reactableOutput}
\alias{renderReactable}
\alias{reactable_html}
\title{Shiny bindings for reactable}
\usage{
reactableOutput(outputId, width = NULL, height = NULL,
  inline = FALSE)

renderReactable(expr, env = parent.frame(), quoted = FALSE)

reactable_html(id, style, class, ...)
}
\arguments{
\item{outputId}{Output variable to read from.}

\item{width, height}{Must be a valid CSS unit (like \code{"100\%"},
\code{"400px"}, \code{"auto"}) or a number, which will be coerced to a
string and have \code{"px"} appended.}

\item{inline}{Display the table as an inline element, which shrinks to fit
its contents? By default, the table is displayed as a block element, which
expands to fit its parent container.}

\item{expr}{An expression that generates a reactable.}

\item{env}{The environment in which to evaluate \code{expr}.}

\item{quoted}{Is \code{expr} a quoted expression (with \code{quote()})? This
is useful if you want to save an expression in a variable.}

\item{id}{Element ID.}

\item{style}{Element style.}

\item{class}{Element class.}

\item{...}{Additional arguments.}
}
\description{
Output and render functions for using reactable within Shiny
applications and interactive R Markdown documents.
}
\note{
See the \href{https://glin.github.io/reactable/articles/shiny-demo.html}{online demo}
for additional examples of using reactable in Shiny.
}
\examples{
\dontrun{
library(shiny)
library(reactable)

ui <- fluidPage(
  titlePanel("reactable example"),
  reactableOutput("table")
)

server <- function(input, output, session) {
  output$table <- renderReactable({
    reactable(iris)
  })
}

shinyApp(ui, server)
}

}
