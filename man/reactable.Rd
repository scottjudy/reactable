% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reactable.R
\name{reactable}
\alias{reactable}
\title{Create an interactive data table}
\usage{
reactable(data, columns = NULL, columnGroups = NULL, rownames = NULL,
  groupBy = NULL, sortable = TRUE, resizable = FALSE,
  filterable = FALSE, searchable = FALSE, defaultColDef = NULL,
  defaultColGroup = NULL, defaultSortOrder = "asc",
  defaultSorted = NULL, pagination = TRUE, defaultPageSize = 10,
  showPageSizeOptions = FALSE, pageSizeOptions = c(10, 25, 50, 100),
  paginationType = "numbers", showPagination = NULL,
  showPageInfo = TRUE, minRows = 1, selection = NULL,
  selectionId = NULL, details = NULL, outlined = FALSE,
  bordered = FALSE, borderless = FALSE, striped = FALSE,
  highlight = TRUE, compact = FALSE, wrap = TRUE,
  showSortIcon = TRUE, showSortable = FALSE, class = NULL,
  style = NULL, rowClass = NULL, rowStyle = NULL, fullWidth = TRUE,
  width = "auto", height = "auto", elementId = NULL)
}
\arguments{
\item{data}{A data frame or matrix.}

\item{columns}{Named list of column definitions. See \code{\link[=colDef]{colDef()}}.}

\item{columnGroups}{List of column group definitions. See \code{\link[=colGroup]{colGroup()}}.}

\item{rownames}{Show row names? Defaults to \code{TRUE} if the data has row names.

To customize or group the row names column, use \code{".rownames"} as the
column name.}

\item{groupBy}{Character vector of column names to group by.}

\item{sortable}{Enable sorting? Defaults to \code{TRUE}.}

\item{resizable}{Enable column resizing?}

\item{filterable}{Enable column filtering?}

\item{searchable}{Enable global table searching?}

\item{defaultColDef}{Default column definition used by every column. See \code{\link[=colDef]{colDef()}}.}

\item{defaultColGroup}{Default column group definition used by every column group.
See \code{\link[=colGroup]{colGroup()}}.}

\item{defaultSortOrder}{Default sort order. Either \code{"asc"} for ascending
order or \code{"desc"} for descending order. Defaults to \code{"asc"}.}

\item{defaultSorted}{Optional vector of column names to sort by default.
Or to customize sort order, a named list with values of \code{"asc"} or \code{"desc"}.}

\item{pagination}{Enable pagination? Defaults to \code{TRUE}.}

\item{defaultPageSize}{Default page size for the table. Defaults to 10.}

\item{showPageSizeOptions}{Show page size options?}

\item{pageSizeOptions}{Page size options for the table. Defaults to 10, 25, 50, 100.}

\item{paginationType}{Pagination control to use. Either \code{"numbers"} for page
number buttons (the default), \code{"jump"} for a page jump, or \code{"simple"} to show
'Previous' and 'Next' buttons only.}

\item{showPagination}{Show pagination? Defaults to \code{TRUE} if the table has more
than one page.}

\item{showPageInfo}{Show page info? Defaults to \code{TRUE}.}

\item{minRows}{Minimum number of rows to show per page. Defaults to 1.}

\item{selection}{Enable row selection? Either \code{"multiple"} or \code{"single"} for
multiple or single row selection.}

\item{selectionId}{Shiny input ID for the selected rows. The selected rows are
represented as a vector of row indices, or \code{NULL} if no rows are selected.}

\item{details}{Additional content to display when expanding a row. An R function
that takes a row index argument or a \code{\link[=JS]{JS()}} function that takes
a row info object as an argument. Can also be a \code{\link[=colDef]{colDef()}} to customize the
details expander column.}

\item{outlined}{Add borders around the table?}

\item{bordered}{Add borders around the table and every cell?}

\item{borderless}{Remove inner borders from table?}

\item{striped}{Add zebra-striping to table rows?}

\item{highlight}{Highlight table rows on hover? Defaults to \code{TRUE}.}

\item{compact}{Make tables more compact?}

\item{wrap}{Enable text wrapping? If \code{TRUE} (the default), long text will be
wrapped to multiple lines. If \code{FALSE}, text will be truncated to fit on one line.}

\item{showSortIcon}{Show a sort icon when sorting columns?}

\item{showSortable}{Show an indicator on sortable columns?}

\item{class}{Additional CSS classes to apply to the table.}

\item{style}{Inline styles to apply to the table. A named list or character string.}

\item{rowClass}{Additional CSS classes to apply to table rows. A character
string, a \code{\link[=JS]{JS()}} function that takes a row info object and table state object
as arguments, or an R function that takes a row index argument.}

\item{rowStyle}{Inline styles to apply to table rows. A named list, character
string, \code{\link[=JS]{JS()}} function that takes a row info object and table state object
as arguments, or an R function that takes a row index argument.}

\item{fullWidth}{Stretch the table to fill the full width of its container?
Defaults to \code{TRUE}.}

\item{width}{Width in pixels. Defaults to \code{"auto"} for automatic sizing.}

\item{height}{Height in pixels. Defaults to \code{"auto"} for automatic sizing.}

\item{elementId}{Element ID for the widget.}
}
\value{
A reactable HTML widget.
}
\description{
\code{reactable()} creates a data table from tabular data with sorting,
pagination, and highlighting enabled by default. The data table is
an HTML widget that can be viewed at an R console, embedded in
R Markdown documents, or used in Shiny web applications.
}
\note{
See the \href{https://glin.github.io/reactable}{online documentation} for
additional details and examples.
}
\examples{
# Basic usage
reactable(iris)

# Grouping and aggregation
reactable(iris, groupBy = "Species", columns = list(
  Sepal.Length = colDef(aggregate = "count"),
  Sepal.Width = colDef(aggregate = "mean"),
  Petal.Length = colDef(aggregate = "sum"),
  Petal.Width = colDef(aggregate = "max")
))

# Row details
reactable(iris, details = function(index) {
  htmltools::div(
    "Details for row: ", index,
    htmltools::tags$pre(paste(capture.output(iris[index, ]), collapse = "\\n"))
  )
})

# Conditional styling
reactable(sleep, columns = list(
  extra = colDef(style = function(value) {
    if (value > 0) {
      color <- "green"
    } else if (value < 0) {
      color <- "red"
    } else {
      color <- "#777"
    }
    list(color = color, fontWeight = "bold")
  })
))

}
\seealso{
\code{\link[=renderReactable]{renderReactable()}} and \code{\link[=reactableOutput]{reactableOutput()}} for using reactable
in Shiny applications or interactive R Markdown documents.
}
